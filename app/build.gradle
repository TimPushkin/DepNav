plugins {
    alias libs.plugins.android.application
    alias libs.plugins.jetbrains.kotlin.android
    alias libs.plugins.google.dagger.hilt.android
    alias libs.plugins.google.devtools.ksp
    id 'kotlin-kapt'
}

def keystorePropertiesFile = rootProject.file('keystore.properties')
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

static def versionToCode(major, minor, patch) {
    assert 0 <= major && major <= 99
    assert 0 <= minor && minor <= 99
    assert 0 <= patch && patch <= 99
    return major * 10000 + minor * 100 + patch
}

static def versionToName(major, minor, patch) {
    return "$major.$minor.$patch"
}

android {
    namespace 'ru.spbu.depnav'

    compileSdk 33

    signingConfigs {
        release {
            if (!keystoreProperties.isEmpty()) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    defaultConfig {
        applicationId 'ru.spbu.depnav'
        minSdk 21
        targetSdk 33
        versionCode versionToCode(1, 3, 2)
        versionName versionToName(1, 3, 2)

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        ksp {
            arg 'room.schemaLocation', "$projectDir/schemas"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain(17)
    }
    kotlinOptions {
        freeCompilerArgs += '-opt-in=kotlin.RequiresOptIn'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.composeCompiler.get()
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation libs.androidx.lifecycle.runtimeKtx
    implementation libs.androidx.lifecycle.viewmodelCompose

    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    annotationProcessor libs.androidx.room.compiler
    ksp libs.androidx.room.compiler

    implementation libs.google.dagger.hilt
    kapt libs.google.dagger.hiltCompiler

    implementation platform(libs.androidx.compose.bom)
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    implementation libs.androidx.core.ktx
    implementation libs.androidx.activity.compose
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.hilt.navigationCompose
    implementation libs.plrapps.mapcompose
    implementation libs.google.accompanist.systemuicontroller

    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.extJunit
}

// Hilt configuration
kapt {
    correctErrorTypes true
}
